// <auto-generated />
using System;
using CodeSparkNET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeSparkNET.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250906192343_ReworkAllModels")]
    partial class ReworkAllModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeSparkNET.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailMarketingConsent")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CodeSparkNET.Models.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Каталог товаров");

                    b.Property<int>("TotalViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 920, DateTimeKind.Utc).AddTicks(5423),
                            Description = "Каталог курсов, веб-шаблонов и дипломных работ",
                            Name = "Каталог товаров",
                            TotalViews = 0,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 920, DateTimeKind.Utc).AddTicks(5655)
                        });
                });

            modelBuilder.Entity("CodeSparkNET.Models.CatalogConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnableCategoryFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePriceFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableProductTypeFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRatingFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSortByDate")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSortByPopularity")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSortByPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSortByRating")
                        .HasColumnType("bit");

                    b.Property<int>("FeaturedProductsCount")
                        .HasColumnType("int");

                    b.Property<int>("PopularProductsCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductsPerPage")
                        .HasColumnType("int");

                    b.Property<int>("RecentProductsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CatalogConfigurations");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f40ca2d-4a0f-492c-9cdf-08076e4af3bb"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(6037),
                            Description = "Курсы по программированию и разработке ПО",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Изучите программирование с нашими курсами",
                            MetaTitle = "Курсы программирования",
                            Name = "Программирование",
                            Slug = "programming",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(6258)
                        },
                        new
                        {
                            Id = new Guid("8c7b7360-47de-49cd-9d4c-1a1e7e5dbc3b"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7362),
                            Description = "Курсы по созданию веб-сайтов и веб-приложений",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Освойте создание современных веб-приложений",
                            MetaTitle = "Курсы веб-разработки",
                            Name = "Веб-разработка",
                            ParentCategoryId = new Guid("2f40ca2d-4a0f-492c-9cdf-08076e4af3bb"),
                            Slug = "web-development",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7363)
                        },
                        new
                        {
                            Id = new Guid("91757b46-3d2a-401a-8d1e-730a6ebe0cd3"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7654),
                            Description = "Курсы по созданию мобильных приложений",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Создавайте мобильные приложения для iOS и Android",
                            MetaTitle = "Курсы мобильной разработки",
                            Name = "Мобильная разработка",
                            ParentCategoryId = new Guid("2f40ca2d-4a0f-492c-9cdf-08076e4af3bb"),
                            Slug = "mobile-development",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7654)
                        },
                        new
                        {
                            Id = new Guid("cb0d9f77-feab-4eb4-b2a0-0dc43fbf6d4c"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7923),
                            Description = "Курсы по анализу данных и машинному обучению",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Изучите анализ данных и машинное обучение",
                            MetaTitle = "Курсы Data Science",
                            Name = "Data Science",
                            Slug = "data-science",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(7923)
                        },
                        new
                        {
                            Id = new Guid("136eaf07-0d67-4999-9209-d5f0f458d02c"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(8191),
                            Description = "Готовые шаблоны для веб-сайтов",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Скачайте готовые шаблоны для ваших проектов",
                            MetaTitle = "Веб-шаблоны",
                            Name = "Веб-шаблоны",
                            Slug = "web-templates",
                            SortOrder = 3,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(8192)
                        },
                        new
                        {
                            Id = new Guid("13856811-69dc-46c2-ab08-991286d89a01"),
                            CreatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(8452),
                            Description = "Готовые дипломные и курсовые работы",
                            IsActive = true,
                            IsVisible = true,
                            MetaDescription = "Качественные дипломные работы по программированию",
                            MetaTitle = "Дипломные работы",
                            Name = "Дипломные работы",
                            Slug = "diploma-works",
                            SortOrder = 4,
                            UpdatedAt = new DateTime(2025, 9, 6, 19, 23, 42, 921, DateTimeKind.Utc).AddTicks(8453)
                        });
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseDetailProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseDetailProductId");

                    b.HasIndex("ModuleId");

                    b.ToTable("CourseAssignments");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseDetail", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("CourseDetails");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique();

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("CodeSparkNET.Models.DiplomaDetail", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bibliography")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiplomaType")
                        .HasColumnType("int");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasPlagiarismCheck")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PlagiarismPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PresentationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("SourceCodeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductId");

                    b.ToTable("DiplomaDetails");
                });

            modelBuilder.Entity("CodeSparkNET.Models.DiplomaOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<Guid>("DiplomaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DiplomaId");

                    b.HasIndex("UserId");

                    b.ToTable("DiplomaOrders");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "Order");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "Order");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("ReviewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SalesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AverageRating");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsPublished");

                    b.HasIndex("Price");

                    b.HasIndex("ProductType");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("ViewsCount");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CodeSparkNET.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("AssignedAt");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsPrimary");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("CodeSparkNET.Models.UserAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAssignments");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateDetail", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserSupport")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorScheme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DemoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Dependencies")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentationUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FigmaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FontsUsed")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Framework")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasAnimations")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDarkMode")
                        .HasColumnType("bit");

                    b.Property<string>("InstallationInstructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsResponsive")
                        .HasColumnType("bit");

                    b.Property<string>("License")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("SourceCodeUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductId");

                    b.ToTable("WebTemplateDetails");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("WebTemplateOrders");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique();

                    b.ToTable("WebTemplateReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CodeSparkNET.Models.Category", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseAssignment", b =>
                {
                    b.HasOne("CodeSparkNET.Models.CourseDetail", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseDetailProductId");

                    b.HasOne("CodeSparkNET.Models.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseDetail", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("CodeSparkNET.Models.CourseDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseEnrollment", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CodeSparkNET.Models.CourseDetail", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CodeSparkNET.Models.DiplomaDetail", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("CodeSparkNET.Models.DiplomaDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeSparkNET.Models.DiplomaOrder", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany("DiplomaOrders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CodeSparkNET.Models.DiplomaDetail", "Diploma")
                        .WithMany("Orders")
                        .HasForeignKey("DiplomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Diploma");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Lesson", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Module", b =>
                {
                    b.HasOne("CodeSparkNET.Models.CourseDetail", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CodeSparkNET.Models.ProductCategory", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeSparkNET.Models.UserAssignment", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany("Assignments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CodeSparkNET.Models.CourseAssignment", "CourseAssignment")
                        .WithMany("UserAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("CourseAssignment");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateDetail", b =>
                {
                    b.HasOne("CodeSparkNET.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("CodeSparkNET.Models.WebTemplateDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateOrder", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany("TemplateOrders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CodeSparkNET.Models.WebTemplateDetail", "Template")
                        .WithMany("Orders")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateReview", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany("TemplateReviews")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CodeSparkNET.Models.WebTemplateDetail", "Template")
                        .WithMany("Reviews")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeSparkNET.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSparkNET.Models.AppUser", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DiplomaOrders");

                    b.Navigation("Enrollments");

                    b.Navigation("TemplateOrders");

                    b.Navigation("TemplateReviews");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseAssignment", b =>
                {
                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("CodeSparkNET.Models.CourseDetail", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("CodeSparkNET.Models.DiplomaDetail", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Module", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("CodeSparkNET.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CodeSparkNET.Models.WebTemplateDetail", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
