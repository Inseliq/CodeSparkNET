@using Microsoft.AspNetCore.Identity
@model CodeSparkNET.Dtos.Profile.ProfileDto
@inject UserManager<AppUser> UserManager
@{
    var user = UserManager.GetUserAsync(User).Result;
}
@{
    ViewData["Title"] = "Личный кабинет";
}
@section Styles {
    <link rel="stylesheet" href="~/css/style/profile.css">
}

<div logo-banner hover>
    <img src="~/../assets/img/banner-tag.webp" alt="banner">
</div>

<div class="__container profile_page">

    <h1>Личный кабинет</h1>

    <div class="long block data">
        <div class="l_block" hover>
            <div class="block header">
                <h2>Личные данные</h2>
            </div>
            <div class="block body">
                <h3 hover el="user-name" title="Имя пользователя">@ViewBag.UserName</h3>
                <button class="edit" data-function="edit-username" data-style="link" hover>
                    Изменить
                </button>
            </div>
            <div class="block body">
                @* <h3>@ViewBag.Role</h3> *@
                <h3 hover el="role" title="Роль">Пользователь</h3>
            </div>
            <div class="block body">
                <h3 hover el="p-time" title="Время до окончания подписки">$prime-time</h3>
            </div>
            <div class="block body">
                <h3 hover el="country" title="Страна проживания">$country</h3>
            </div>
            <div class="block footer">
                <h2>Активация кода</h2>
                <form class="input_block" action="#">
                    <input type="text" code placeholder="Введите код" hover>
                    <button type="submit" err-w data-style="hyper-button" hover><span>Активировать код</span></button>
                    @* data-function="alert-code-ok" *@
                    @* data-function="alert-code-err" *@
                </form>
            </div>
        </div>
        <div class="r_block" hover>
            <div class="block header">
                <h2>Настройки безопасности аккаунта</h2>
            </div>
            @if (UserManager.IsEmailConfirmedAsync(user).Result is false)
            {
                <div class="block body n_confirm">
                    <div class="left" hover>
                        <h3 title="Подтвердите адрес электронной почты">@ViewBag.Email</h3>
                        <span>Ваш Email не подтвержден!</span>
                    </div>
                    <button data-function="confirmEmailBtn" class="btn right" data-style="link" hover>Подтвердить</button>
                </div>
            }
            else
            {
                <div class="block body confirm">
                    <div class="left" hover>
                        <h3 title="Электронная почта">@ViewBag.Email</h3>
                        <span>Email добавлен: $data-confirm-email</span>
                    </div>
                    <button data-function="editEmailBtn" class="btn right" data-style="link" hover>Изменить</button>
                </div>
            }
            <div class="block body">
                <h3 hover el="password" title="Ваш пароль">Пароль добавлен: $data-edit-password</h3>
                <button class="edit" data-function="editPasswordBtn" hover data-style="link">Изменить</button>
            </div>
            <div class="block body">
                <h3 hover el="2FA" title="Двуфакторная аутентификация. 2FA">Двуфакторная аутентификация</h3>
                <button class="connect" err-w hover data-style="link">Подключить</button>
                @* data-function="connect2FA" *@
            </div>
            <div class="block body">
                <h3 hover el="Cookie" title="Настройки файлов-Cookie">Правила использования Cookie</h3>
                <button class="tune" err-w hover data-style="link">Настройки</button>
                @* data-function="tuneCookie" *@
            </div>
            <div class="block body">
                <h3 hover el="tribute" title="Подключение подписки. Tribute">$tribute</h3>
                <button class="connect" err-w hover data-style="link">Подключить</button>
                @* data-function="connectTribute" *@
            </div>
            <div class="block body">
                <h3 hover el="debug" title="Нашли ошибки? Сообщите нам!">Сообщить об ошибке</h3>
                <button class="send" err-w hover data-style="link">Отправить</button>
                @* data-function="sendMessageAboutBug" *@
            </div>
            <div class="block body">
                <h3 hover el="user-guide" title="Руководство пользователя">Руководство пользователя</h3>
                <button class="see" err-w hover data-style="link-new">Посмотреть</button>
                @* data-function="connectTribute" *@
            </div>
        </div>
    </div>
    <div class="long block management">
        <div class="block session" hover>
            <h2>$Сеансы</h2>
        </div>
        <div class="block prime_pref" hover>
            <h2>$Настройка подписок</h2>
        </div>
    </div>
    <div class="long block save_data" hover>
        <div class="content">
            <div class="left">
                <h2>$Защита данных</h2>
                <span>$desc</span>
            </div>
            <div class="right">
                <button class="tune" hover data-style="link-new">Управление данными</button>
            </div>
        </div>
    </div>


    <div class="js-window hidden" js-window-send-confirmation-email>
        <div class="description" hover>
            <h2>Проверьте вашу почту</h2>
            <a hover data-style="hyper-button"><span>Продолжить</span></a>
        </div>
    </div>
    <div class="js-window hidden" js-window-update-profile>
        <div class="description" hover>
            <h2></h2>
            <a hover data-style="hyper-button" id="continueBtn"><span>Продолжить</span></a>
        </div>
    </div>
    <div class="js-window hidden" js-window-change-password>
        <div class="description" hover>
            <h2></h2>
            <a hover data-style="hyper-button" id="continueBtn"><span>Продолжить</span></a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const confirmEmailBtn = document.getElementById('confirmEmailBtn');
            const updateProfileForm = document.getElementById('updateProfileForm');
            const changePasswordForm = document.getElementById('changePasswordForm');
            confirmEmailBtn.addEventListener('click', async (event) => {
                event.preventDefault();

                showSendEmailResultModal();

                try {
                    const response = await fetch('@Url.Action("SendEmailConfirmation", "Profile")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                } catch (error) {
                    console.error('Произошла ошибка:', error);
                }
            });

            updateProfileForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                if (!jQuery(updateProfileForm).valid())
                    return;

                const formData = new FormData(updateProfileForm);
                const tokenInput = updateProfileForm.querySelector('input[name="__RequestVerificationToken"]');
                const antiForgeryToken = tokenInput ? tokenInput.value : null;

                const headers = {};
                if (antiForgeryToken) headers['RequestVerificationToken'] = antiForgeryToken;

                try {
                    const response = await fetch(updateProfileForm.action || window.location.pathname, {
                        method: 'POST',
                        headers: headers,
                        body: formData
                    });

                    const result = await response.json();
                    if (result.success) {
                        showUpdateProfileResultModal(true);
                    } else if (result.errors) {
                        showUpdateProfileResultModal(false);
                    }
                } catch (error) {
                    console.error('Произошла ошибка:', error);
                }
            });

            changePasswordForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                if (!jQuery(changePasswordForm).valid())
                    return;

                const formData = new FormData(changePasswordForm);
                const tokenInput = changePasswordForm.querySelector('input[name="__RequestVerificationToken"]');
                const antiForgeryToken = tokenInput ? tokenInput.value : null;

                const headers = {};
                if (antiForgeryToken) headers['RequestVerificationToken'] = antiForgeryToken;

                try {
                    const response = await fetch(changePasswordForm.action || window.location.pathname, {
                        method: 'POST',
                        headers: headers,
                        body: formData
                    });

                    const result = await response.json();
                    if (result.success) {
                        showChangePasswordResultModal(true);
                    } else if (result.errors) {
                        showChangePasswordResultModal(false);
                    }
                } catch (error) {
                    console.error('Произошла ошибка:', error);
                }
            });

            function showSendEmailResultModal() {
                const modalWindow = document.querySelector('[js-window-send-confirmation-email]');

                if (!modalWindow) {
                    return;
                }

                modalWindow.classList.replace('hidden', 'visible');
            }

            function showUpdateProfileResultModal(success) {
                const modalWindow = document.querySelector('[js-window-update-profile]');
                const resultTitle = modalWindow.querySelector('h2');

                if (!modalWindow) {
                    return;
                }

                if (success) {
                    resultTitle.textContent = "Профиль успешно обновлен.";
                    modalWindow.classList.replace('hidden', 'visible');
                } else {
                    resultTitle.textContent = "Произошла ошибка при обновлении профиля.";
                    modalWindow.classList.replace('hidden', 'visible');
                }
            }
        });

        function showChangePasswordResultModal(success) {
            const modalWindow = document.querySelector('[js-window-change-password]');
            const resultTitle = modalWindow.querySelector('h2');

            if (!modalWindow) {
                return;
            }

            if (success) {
                resultTitle.textContent = "Пароль успешно изменен.";
                modalWindow.classList.replace('hidden', 'visible');
            } else {
                resultTitle.textContent = "Произошла ошибка при изменении пароля.";
                modalWindow.classList.replace('hidden', 'visible');
            }
        }
    </script>

</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}