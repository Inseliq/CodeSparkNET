<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Templates Management</title>
    <style>
        /* Templates Management Styles */

        :root {
            --color-primary: #4f46e5;
            --color-primary-hover: #4338ca;
            --color-secondary: #64748b;
            --color-secondary-hover: #475569;
            --color-danger: #dc2626;
            --color-danger-hover: #b91c1c;
            --color-success: #16a34a;
            --color-bg: #ffffff;
            --color-bg-secondary: #f8fafc;
            --color-border: #e2e8f0;
            --color-text: #1e293b;
            --color-text-light: #64748b;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --radius-sm: 0.375rem;
            --radius-md: 0.5rem;
            --radius-lg: 0.75rem;
        }

        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--color-bg-secondary);
        }

        .templates-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1.5rem;
        }

        /* Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .page-header h1 {
            margin: 0;
            color: var(--color-text);
        }

        /* Search Bar */
        .search-bar {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 2rem;
            max-width: 600px;
        }

        .search-bar input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-md);
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .search-bar input:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--radius-md);
            font-weight: 500;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            white-space: nowrap;
            cursor: pointer;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-primary {
            background-color: var(--color-primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--color-primary-hover);
        }

        .btn-secondary {
            background-color: var(--color-secondary);
            color: white;
        }

        .btn-secondary:hover {
            background-color: var(--color-secondary-hover);
        }

        .btn-danger {
            background-color: var(--color-danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: var(--color-danger-hover);
        }

        .btn-small {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .btn .icon {
            font-size: 1.25rem;
            line-height: 1;
        }

        /* Templates Grid */
        .templates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
        }

        .template-card {
            background: var(--color-bg);
            border: 1px solid var(--color-border);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            transition: all 0.2s;
            position: relative;
        }

        .template-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .template-card-image {
            width: 100%;
            height: 180px;
            border-radius: var(--radius-md);
            object-fit: cover;
            margin-bottom: 1rem;
            background-color: var(--color-bg-secondary);
        }

        .template-card-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 1rem;
        }

        .template-card-title {
            margin: 0 0 0.5rem 0;
            color: var(--color-text);
        }

        .template-status {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-active {
            background-color: #dcfce7;
            color: var(--color-success);
        }

        .status-inactive {
            background-color: #fee2e2;
            color: var(--color-danger);
        }

        .template-slug {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: var(--color-bg-secondary);
            border-radius: var(--radius-sm);
            font-family: monospace;
            font-size: 0.875rem;
            color: var(--color-text-light);
            margin-bottom: 1rem;
        }

        .template-price {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--color-primary);
            margin-bottom: 0.5rem;
        }

        .template-description {
            color: var(--color-text-light);
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .template-meta {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            color: var(--color-text-light);
        }

        .template-card-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--color-border);
        }

        .template-card-actions button {
            flex: 1;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 3rem;
            color: var(--color-text-light);
            grid-column: 1 / -1;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--color-text-light);
            grid-column: 1 / -1;
        }

        .empty-state h3 {
            margin-bottom: 0.5rem;
            color: var(--color-text);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 2rem;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--color-bg);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            width: 100%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideUp 0.3s ease;
        }

        .modal-small {
            max-width: 400px;
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--color-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2,
        .modal-header h3 {
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 2rem;
            line-height: 1;
            color: var(--color-text-light);
            cursor: pointer;
            padding: 0;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--radius-sm);
            transition: all 0.2s;
        }

        .close-btn:hover {
            background-color: var(--color-bg-secondary);
            color: var(--color-text);
        }

        .modal-body {
            padding: 1.5rem;
        }

        /* Form */
        form {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--color-text);
            font-weight: 500;
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-md);
            font-family: inherit;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-group textarea {
            resize: vertical;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .form-group small {
            display: block;
            margin-top: 0.25rem;
            color: var(--color-text-light);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            margin: 0;
            font-weight: 400;
        }

        .checkbox-group input[type="checkbox"] {
            width: 1.25rem;
            height: 1.25rem;
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
            padding: 1.5rem;
            border-top: 1px solid var(--color-border);
        }

        .template-name-confirm {
            font-weight: 600;
            color: var(--color-text);
            margin-top: 0.5rem;
        }

        /* Image Management */
        .images-section {
            margin-bottom: 1.5rem;
        }

        .images-section label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--color-text);
            font-weight: 500;
        }

        .image-upload-area {
            border: 2px dashed var(--color-border);
            border-radius: var(--radius-md);
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 1rem;
        }

        .image-upload-area:hover {
            border-color: var(--color-primary);
            background-color: rgba(79, 70, 229, 0.02);
        }

        .image-upload-area.drag-over {
            border-color: var(--color-primary);
            background-color: rgba(79, 70, 229, 0.05);
        }

        .upload-icon {
            font-size: 3rem;
            color: var(--color-text-light);
            margin-bottom: 0.5rem;
        }

        .images-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
        }

        .image-item {
            position: relative;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-md);
            overflow: hidden;
            background-color: var(--color-bg-secondary);
        }

        .image-item img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            display: block;
        }

        .image-item-actions {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            display: flex;
            gap: 0.25rem;
        }

        .image-btn {
            background: rgba(255, 255, 255, 0.9);
            border: none;
            width: 2rem;
            height: 2rem;
            border-radius: var(--radius-sm);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .image-btn:hover {
            background: white;
            transform: scale(1.1);
        }

        .image-btn.delete {
            color: var(--color-danger);
        }

        .main-badge {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(79, 70, 229, 0.9);
            color: white;
            padding: 0.25rem;
            text-align: center;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .image-alt-text {
            padding: 0.5rem;
            font-size: 0.75rem;
            color: var(--color-text-light);
            border-top: 1px solid var(--color-border);
            background: white;
        }

        .image-alt-input {
            width: 100%;
            padding: 0.25rem 0.5rem;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
        }

        /* Responsive */
        @@media screen and (max-width: 768px) {
            .templates-grid {
                grid-template-columns: 1fr;
            }

            .page-header {
                flex-direction: column;
                align-items: stretch;
            }

            .search-bar {
                flex-direction: column;
                max-width: none;
            }

            .modal {
                padding: 1rem;
            }

            .template-card-actions {
                flex-direction: column;
            }

            .form-actions {
                flex-direction: column-reverse;
            }

            .form-actions button {
                width: 100%;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .images-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
        }

        @@media screen and (max-width: 540px) {
            .templates-container {
                padding: 0 1rem;
            }

            .template-card {
                padding: 1rem;
            }
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes slideOut {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    </style>
</head>
<body>
    <div class="templates-container">
        <header class="page-header">
            <h1>Templates Management</h1>
            <button id="btnCreateNew" class="btn btn-primary">
                <span class="icon">+</span> Create New Template
            </button>
        </header>

        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search templates by name or slug..." />
            <button id="btnSearch" class="btn btn-secondary">Search</button>
        </div>

        <div class="templates-grid" id="templatesGrid">
            <div class="loading">Loading templates...</div>
        </div>
    </div>

    <!-- Modal for Create/Edit -->
    <div id="templateModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Create Template</h2>
                <button class="close-btn" id="btnCloseModal">&times;</button>
            </div>
            <form id="templateForm">
                <input type="hidden" id="templateId" />

                <div class="form-group">
                    <label for="templateName">Name *</label>
                    <input type="text" id="templateName" required />
                </div>

                <div class="form-group">
                    <label for="templateSlug">Slug *</label>
                    <input type="text" id="templateSlug" required />
                    <small>URL-friendly identifier (lowercase, no spaces)</small>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="templatePrice">Price *</label>
                        <input type="number" id="templatePrice" step="0.01" min="0" required />
                    </div>

                    <div class="form-group">
                        <label for="templateCurrency">Currency *</label>
                        <select id="templateCurrency" required>
                            <option value="RUB">RUB</option>
                            <option value="USD">USD</option>
                            <option value="EUR">EUR</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="templateInStock">In Stock *</label>
                        <input type="number" id="templateInStock" min="0" value="0" required />
                    </div>

                    <div class="form-group">
                        <label for="templateProductType">Product Type *</label>
                        <input type="text" id="templateProductType" required />
                    </div>
                </div>

                <div class="form-group">
                    <label for="templateCatalogId">Catalog ID *</label>
                    <input type="text" id="templateCatalogId" required />
                    <small>ID of the catalog containing this template</small>
                </div>

                <div class="images-section">
                    <label>Product Images</label>
                    <div class="image-upload-area" id="imageUploadArea">
                        <div class="upload-icon">📁</div>
                        <p>Click or drag images here to upload</p>
                        <small>Supports JPG, PNG, GIF</small>
                    </div>
                    <input type="file" id="imageFileInput" accept="image/*" multiple style="display: none;" />
                    <div class="images-grid" id="imagesGrid"></div>
                </div>

                <div class="form-group">
                    <label for="templateShortDescription">Short Description</label>
                    <textarea id="templateShortDescription" rows="2"></textarea>
                    <small>Brief summary (for previews)</small>
                </div>

                <div class="form-group">
                    <label for="templateFullDescription">Full Description</label>
                    <textarea id="templateFullDescription" rows="6"></textarea>
                </div>

                <div class="form-group checkbox-group">
                    <label>
                        <input type="checkbox" id="templateIsPublished" checked />
                        <span>Published (visible in catalog)</span>
                    </label>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="btnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="btnSubmit">Save Template</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="modal">
        <div class="modal-content modal-small">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this template?</p>
                <p class="template-name-confirm"></p>
            </div>
            <div class="form-actions">
                <button class="btn btn-secondary" id="btnCancelDelete">Cancel</button>
                <button class="btn btn-danger" id="btnConfirmDelete">Delete</button>
            </div>
        </div>
    </div>

    <script>
        class TemplatesManager {
            constructor() {
                this.templates = [];
                this.currentTemplate = null;
                this.deleteTemplateId = null;
                this.productImages = [];
                this.init();
            }

            init() {
                this.loadTemplates();
                this.setupEventListeners();
                this.setupAutoSlugGeneration();
                this.setupImageUpload();
            }

            setupEventListeners() {
                document.getElementById('btnCreateNew').addEventListener('click', () => {
                    this.openModal('create');
                });

                document.getElementById('btnCloseModal').addEventListener('click', () => {
                    this.closeModal();
                });

                document.getElementById('btnCancel').addEventListener('click', () => {
                    this.closeModal();
                });

                document.getElementById('templateForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveTemplate();
                });

                document.getElementById('btnSearch').addEventListener('click', () => {
                    this.filterTemplates();
                });

                document.getElementById('searchInput').addEventListener('input', (e) => {
                    if (e.target.value === '') {
                        this.renderTemplates(this.templates);
                    }
                });

                document.getElementById('searchInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.filterTemplates();
                    }
                });

                document.getElementById('templateModal').addEventListener('click', (e) => {
                    if (e.target.id === 'templateModal') {
                        this.closeModal();
                    }
                });

                document.getElementById('confirmModal').addEventListener('click', (e) => {
                    if (e.target.id === 'confirmModal') {
                        this.closeDeleteModal();
                    }
                });

                document.getElementById('btnCancelDelete').addEventListener('click', () => {
                    this.closeDeleteModal();
                });

                document.getElementById('btnConfirmDelete').addEventListener('click', () => {
                    this.confirmDelete();
                });
            }

            setupImageUpload() {
                const uploadArea = document.getElementById('imageUploadArea');
                const fileInput = document.getElementById('imageFileInput');

                uploadArea.addEventListener('click', () => {
                    fileInput.click();
                });

                fileInput.addEventListener('change', (e) => {
                    this.handleFiles(e.target.files);
                });

                uploadArea.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadArea.classList.add('drag-over');
                });

                uploadArea.addEventListener('dragleave', () => {
                    uploadArea.classList.remove('drag-over');
                });

                uploadArea.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadArea.classList.remove('drag-over');
                    this.handleFiles(e.dataTransfer.files);
                });
            }

            handleFiles(files) {
                Array.from(files).forEach(file => {
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.addImage(e.target.result, '');
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            addImage(url, altText = '', isMain = false) {
                this.productImages.push({
                    url: url,
                    altText: altText,
                    isMain: isMain || this.productImages.length === 0
                });
                this.renderImages();
            }

            removeImage(index) {
                this.productImages.splice(index, 1);
                if (this.productImages.length > 0 && !this.productImages.some(img => img.isMain)) {
                    this.productImages[0].isMain = true;
                }
                this.renderImages();
            }

            setMainImage(index) {
                this.productImages.forEach((img, i) => {
                    img.isMain = i === index;
                });
                this.renderImages();
            }

            updateImageAlt(index, altText) {
                this.productImages[index].altText = altText;
            }

            renderImages() {
                const grid = document.getElementById('imagesGrid');
                
                if (this.productImages.length === 0) {
                    grid.innerHTML = '';
                    return;
                }

                grid.innerHTML = this.productImages.map((img, index) => `
                    <div class="image-item">
                        <img src="${this.escapeHtml(img.url)}" alt="${this.escapeHtml(img.altText || 'Product image')}" />
                        <div class="image-item-actions">
                            <button type="button" class="image-btn" onclick="templatesManager.setMainImage(${index})" title="Set as main">
                                ${img.isMain ? '⭐' : '☆'}
                            </button>
                            <button type="button" class="image-btn delete" onclick="templatesManager.removeImage(${index})" title="Remove">
                                ×
                            </button>
                        </div>
                        ${img.isMain ? '<div class="main-badge">Main Image</div>' : ''}
                        <div class="image-alt-text">
                            <input type="text" class="image-alt-input" placeholder="Alt text..." 
                                value="${this.escapeHtml(img.altText || '')}" 
                                onchange="templatesManager.updateImageAlt(${index}, this.value)" />
                        </div>
                    </div>
                `).join('');
            }

            setupAutoSlugGeneration() {
                const nameInput = document.getElementById('templateName');
                const slugInput = document.getElementById('templateSlug');

                nameInput.addEventListener('input', (e) => {
                    if (!this.currentTemplate && slugInput.value === '') {
                        const slug = this.generateSlug(e.target.value);
                        slugInput.value = slug;
                    }
                });
            }

            generateSlug(text) {
                return text
                    .toLowerCase()
                    .trim()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/[\s_-]+/g, '-')
                    .replace(/^-+|-+$/g, '');
            }

            async loadTemplates() {
                try {
                    const response = await fetch('/templates');
                    if (!response.ok) throw new Error('Failed to load templates');

                    this.templates = await response.json();
                    this.renderTemplates(this.templates);
                } catch (error) {
                    console.error('Error loading templates:', error);
                    this.showError('Failed to load templates. Please refresh the page.');
                }
            }

            renderTemplates(templates) {
                const grid = document.getElementById('templatesGrid');

                if (templates.length === 0) {
                    grid.innerHTML = `
                        <div class="empty-state">
                            <h3>No templates found</h3>
                            <p>Create your first template to get started</p>
                        </div>
                    `;
                    return;
                }

                grid.innerHTML = templates.map(template => {
                    const mainImage = template.productImages?.find(img => img.isMain) || template.productImages?.[0];
                    const imageHtml = mainImage 
                        ? `<img src="${this.escapeHtml(mainImage.url)}" alt="${this.escapeHtml(mainImage.altText || template.name)}" class="template-card-image" />`
                        : '';

                    return `
                        <div class="template-card" data-id="${template.id || template.slug}">
                            ${imageHtml}
                            <div class="template-card-header">
                                <div>
                                    <h3 class="template-card-title">${this.escapeHtml(template.name)}</h3>
                                    <span class="template-slug">${this.escapeHtml(template.slug)}</span>
                                </div>
                                <span class="template-status ${template.isPublished ? 'status-active' : 'status-inactive'}">
                                    ${template.isPublished ? 'Published' : 'Draft'}
                                </span>
                            </div>
                            <div class="template-price">${template.price} ${template.currency}</div>
                            <div class="template-meta">
                                <span>Type: ${this.escapeHtml(template.productType)}</span>
                                <span>Stock: ${template.inStock}</span>
                            </div>
                            <p class="template-description">
                                ${this.escapeHtml(template.shortDescription || template.fullDescription || 'No description')}
                            </p>
                            <div class="template-card-actions">
                                <button class="btn btn-secondary btn-small" onclick="templatesManager.editTemplate('${template.id || template.slug}')">
                                    Edit
                                </button>
                                <button class="btn btn-danger btn-small" onclick="templatesManager.deleteTemplate('${template.id || template.slug}', '${this.escapeHtml(template.name)}')">
                                    Delete
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');
            }

            filterTemplates() {
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();

                if (!searchTerm) {
                    this.renderTemplates(this.templates);
                    return;
                }

                const filtered = this.templates.filter(template =>
                    template.name.toLowerCase().includes(searchTerm) ||
                    template.slug.toLowerCase().includes(searchTerm) ||
                    (template.shortDescription && template.shortDescription.toLowerCase().includes(searchTerm)) ||
                    (template.fullDescription && template.fullDescription.toLowerCase().includes(searchTerm)) ||
                    (template.productType && template.productType.toLowerCase().includes(searchTerm))
                );

                this.renderTemplates(filtered);
            }

            openModal(mode = 'create', template = null) {
                this.currentTemplate = template;
                this.productImages = [];
                
                const modal = document.getElementById('templateModal');
                const form = document.getElementById('templateForm');
                const title = document.getElementById('modalTitle');

                form.reset();

                if (mode === 'edit' && template) {
                    title.textContent = 'Edit Template';
                    document.getElementById('templateId').value = template.id || '';
                    document.getElementById('templateName').value = template.name || '';
                    document.getElementById('templateSlug').value = template.slug || '';
                    document.getElementById('templatePrice').value = template.price || 0;
                    document.getElementById('templateCurrency').value = template.currency || 'RUB';
                    document.getElementById('templateInStock').value = template.inStock || 0;
                    document.getElementById('templateProductType').value = template.productType || '';
                    document.getElementById('templateCatalogId').value = template.catalogId || '';
                    document.getElementById('templateShortDescription').value = template.shortDescription || '';
                    document.getElementById('templateFullDescription').value = template.fullDescription || '';
                    document.getElementById('templateIsPublished').checked = template.isPublished !== false;
                    
                    if (template.productImages && template.productImages.length > 0) {
                        this.productImages = JSON.parse(JSON.stringify(template.productImages));
                        this.renderImages();
                    }
                } else {
                    title.textContent = 'Create Template';
                    document.getElementById('templateIsPublished').checked = true;
                    document.getElementById('templateCurrency').value = 'RUB';
                    document.getElementById('templatePrice').value = 0;
                    document.getElementById('templateInStock').value = 0;
                    this.renderImages();
                }

                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            closeModal() {
                const modal = document.getElementById('templateModal');
                modal.classList.remove('active');
                document.body.style.overflow = '';
                this.currentTemplate = null;
                this.productImages = [];
            }

            async saveTemplate() {
                const id = document.getElementById('templateId').value;
                const name = document.getElementById('templateName').value.trim();
                const slug = document.getElementById('templateSlug').value.trim();
                const price = parseFloat(document.getElementById('templatePrice').value);
                const currency = document.getElementById('templateCurrency').value;
                const inStock = parseInt(document.getElementById('templateInStock').value);
                const productType = document.getElementById('templateProductType').value.trim();
                const catalogId = document.getElementById('templateCatalogId').value.trim();
                const shortDescription = document.getElementById('templateShortDescription').value.trim();
                const fullDescription = document.getElementById('templateFullDescription').value.trim();
                const isPublished = document.getElementById('templateIsPublished').checked;

                if (!name || !slug || !productType || !catalogId) {
                    this.showError('Please fill in all required fields');
                    return;
                }

                const templateData = {
                    name,
                    slug,
                    price,
                    currency,
                    inStock,
                    productType,
                    catalogId,
                    shortDescription: shortDescription || null,
                    fullDescription: fullDescription || null,
                    isPublished,
                    productImages: this.productImages
                };

                try {
                    let response;

                    if (this.currentTemplate) {
                        const slug = document.getElementById('templateSlug').value;
                        response = await fetch(`/templates`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(templateData)
                        });
                    } else {
                        response = await fetch('/templates', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(templateData)
                        });
                    }


                    if (!response.ok) {
                        const error = await response.text();
                        throw new Error(error || 'Failed to save template');
                    }

                    this.closeModal();
                    await this.loadTemplates();
                    this.showSuccess(this.currentTemplate ? 'Template updated successfully' : 'Template created successfully');
                } catch (error) {
                    console.error('Error saving template:', error);
                    this.showError(error.message || 'Failed to save template');
                }
            }

            async editTemplate(idOrSlug) {
                try {
                    const response = await fetch(`/templates/${idOrSlug}`);
                    if (!response.ok) throw new Error('Failed to load template');

                    const template = await response.json();
                    this.openModal('edit', template);
                } catch (error) {
                    console.error('Error loading template:', error);
                    this.showError('Failed to load template for editing');
                }
            }

            deleteTemplate(idOrSlug, name) {
                this.deleteTemplateId = idOrSlug;
                document.querySelector('.template-name-confirm').textContent = name;
                document.getElementById('confirmModal').classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            closeDeleteModal() {
                document.getElementById('confirmModal').classList.remove('active');
                document.body.style.overflow = '';
                this.deleteTemplateId = null;
            }

            async confirmDelete() {
                if (!this.deleteTemplateId) return;

                try {
                    const response = await fetch(`/templates/${this.deleteTemplateId}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Failed to delete template');

                    this.closeDeleteModal();
                    await this.loadTemplates();
                    this.showSuccess('Template deleted successfully');
                } catch (error) {
                    console.error('Error deleting template:', error);
                    this.showError('Failed to delete template');
                }
            }

            showSuccess(message) {
                this.showNotification(message, 'success');
            }

            showError(message) {
                this.showNotification(message, 'error');
            }

            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.textContent = message;
                notification.style.cssText = `
                    position: fixed;
                    top: 2rem;
                    right: 2rem;
                    padding: 1rem 1.5rem;
                    background: ${type === 'success' ? '#16a34a' : '#dc2626'};
                    color: white;
                    border-radius: 0.5rem;
                    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
                    z-index: 2000;
                    animation: slideIn 0.3s ease;
                `;

                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }

            escapeHtml(text) {
                if (!text) return '';
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        }

        const templatesManager = new TemplatesManager();
    </script>
</body>
</html>